// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SnapshotOperations.
    /// </summary>
    public static partial class SnapshotOperationsExtensions
    {
            /// <summary>
            /// Take a snapshot.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// User specified type, maximum length is 128.
            /// </param>
            /// <param name='objectId'>
            /// User specified objectId, maximum length is 128.
            /// </param>
            /// <param name='applyScope'>
            /// Array of applyScope
            /// </param>
            /// <param name='context'>
            /// User specified context, maximum length is 128.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SnapshotTakeHeaders> TakeAsync(this ISnapshotOperations operations, string type = default(string), string objectId = default(string), IList<System.Guid> applyScope = default(IList<System.Guid>), string context = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TakeWithHttpMessagesAsync(type, objectId, applyScope, context, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get snapshot list.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// User specified type.
            /// </param>
            /// <param name='applyScope'>
            /// User specified apply scope.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Snapshot>> ListAsync(this ISnapshotOperations operations, string type, IList<object> applyScope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(type, applyScope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a snapshot.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='snapshotId'>
            /// Id referencing a particular snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Snapshot> GetAsync(this ISnapshotOperations operations, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(snapshotId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a snapshot.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='snapshotId'>
            /// Id referencing a particular snapshot.
            /// </param>
            /// <param name='applyScope'>
            /// Array of applyScope
            /// </param>
            /// <param name='context'>
            /// User specified context, maximum length is 1024.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this ISnapshotOperations operations, string snapshotId, IList<System.Guid> applyScope = default(IList<System.Guid>), string context = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(snapshotId, applyScope, context, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete an existing snapshot.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='snapshotId'>
            /// Id referencing a particular snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISnapshotOperations operations, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(snapshotId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Apply a snapshot.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='snapshotId'>
            /// Id referencing a particular snapshot.
            /// </param>
            /// <param name='objectId'>
            /// User specified objectId, maximum length is 128.
            /// </param>
            /// <param name='mode'>
            /// User specified context, maximum length is 128.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SnapshotApplyHeaders> ApplyAsync(this ISnapshotOperations operations, string snapshotId, string objectId = default(string), string mode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApplyWithHttpMessagesAsync(snapshotId, objectId, mode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieve the take/apply status of a snapshot operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='snapshotId'>
            /// Id referencing a particular snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> GetOperationStatusAsync(this ISnapshotOperations operations, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusWithHttpMessagesAsync(snapshotId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
