// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Snapshot object.
    /// </summary>
    public partial class Snapshot
    {
        /// <summary>
        /// Initializes a new instance of the Snapshot class.
        /// </summary>
        public Snapshot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Snapshot class.
        /// </summary>
        /// <param name="id">snapshot id, maximum length is 128.</param>
        /// <param name="account">User account.</param>
        /// <param name="type">User specified type, maximum length is
        /// 128.</param>
        /// <param name="applyScope">Array of applyScope</param>
        /// <param name="context">User specified context, maximum length is
        /// 1024.</param>
        /// <param name="createdTime">A combined UTC date and time string that
        /// describes the created time of snapshot.</param>
        /// <param name="lastUpdateTime">A combined UTC date and time string
        /// that describes the last modify time of snapshot.</param>
        public Snapshot(System.Guid? id = default(System.Guid?), string account = default(string), string type = default(string), IList<System.Guid> applyScope = default(IList<System.Guid>), string context = default(string), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? lastUpdateTime = default(System.DateTime?))
        {
            Id = id;
            Account = account;
            Type = type;
            ApplyScope = applyScope;
            Context = context;
            CreatedTime = createdTime;
            LastUpdateTime = lastUpdateTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets snapshot id, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Gets or sets user account.
        /// </summary>
        [JsonProperty(PropertyName = "account")]
        public string Account { get; set; }

        /// <summary>
        /// Gets or sets user specified type, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets array of applyScope
        /// </summary>
        [JsonProperty(PropertyName = "applyScope")]
        public IList<System.Guid> ApplyScope { get; set; }

        /// <summary>
        /// Gets or sets user specified context, maximum length is 1024.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public string Context { get; set; }

        /// <summary>
        /// Gets or sets a combined UTC date and time string that describes the
        /// created time of snapshot.
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets a combined UTC date and time string that describes the
        /// last modify time of snapshot.
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdateTime")]
        public System.DateTime? LastUpdateTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type != null)
            {
                if (Type.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Type", 128);
                }
            }
            if (Context != null)
            {
                if (Context.Length > 1024)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Context", 1024);
                }
            }
            if (CreatedTime.Length > 128)
            {
                throw new ValidationException(ValidationRules.MaxLength, "CreatedTime", 128);
            }
            if (LastUpdateTime.Length > 128)
            {
                throw new ValidationException(ValidationRules.MaxLength, "LastUpdateTime", 128);
            }
        }
    }
}
