// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A combination of data for take a snapshot.
    /// </summary>
    public partial class TakeSnapshotContract
    {
        /// <summary>
        /// Initializes a new instance of the TakeSnapshotContract class.
        /// </summary>
        public TakeSnapshotContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TakeSnapshotContract class.
        /// </summary>
        /// <param name="type">User specified type, maximum length is
        /// 128.</param>
        /// <param name="objectId">User specified objectId, maximum length is
        /// 128.</param>
        /// <param name="applyScope">Array of applyScope</param>
        /// <param name="context">User specified context, maximum length is
        /// 128.</param>
        public TakeSnapshotContract(string type = default(string), string objectId = default(string), IList<System.Guid> applyScope = default(IList<System.Guid>), string context = default(string))
        {
            Type = type;
            ObjectId = objectId;
            ApplyScope = applyScope;
            Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user specified type, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets user specified objectId, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets array of applyScope
        /// </summary>
        [JsonProperty(PropertyName = "ApplyScope")]
        public IList<System.Guid> ApplyScope { get; set; }

        /// <summary>
        /// Gets or sets user specified context, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public string Context { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type != null)
            {
                if (Type.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Type", 128);
                }
            }
            if (ObjectId != null)
            {
                if (ObjectId.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ObjectId", 128);
                }
            }
            if (Context != null)
            {
                if (Context.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Context", 128);
                }
            }
        }
    }
}
