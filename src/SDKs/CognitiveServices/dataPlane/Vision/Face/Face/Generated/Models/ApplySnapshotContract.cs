// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.Vision.Face.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A combination of data for apply a snapshot.
    /// </summary>
    public partial class ApplySnapshotContract
    {
        /// <summary>
        /// Initializes a new instance of the ApplySnapshotContract class.
        /// </summary>
        public ApplySnapshotContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplySnapshotContract class.
        /// </summary>
        /// <param name="objectId">User specified objectId, maximum length is
        /// 128.</param>
        /// <param name="mode">User specified context, maximum length is
        /// 128.</param>
        public ApplySnapshotContract(string objectId = default(string), string mode = default(string))
        {
            ObjectId = objectId;
            Mode = mode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user specified objectId, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets user specified context, maximum length is 128.
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ObjectId != null)
            {
                if (ObjectId.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ObjectId", 128);
                }
            }
            if (Mode != null)
            {
                if (Mode.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Mode", 128);
                }
            }
        }
    }
}
